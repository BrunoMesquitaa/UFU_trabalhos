for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
df_final = rbind(df_final, df_inner_join)
}
df_final_temp = df_final[!is.na(df_final$lat),]
df_final_faltante = df_final[is.na(df_final$lat),]
if (!require('dplyr'))install.packages("dplyr");library(dplyr)
if (!require('stringr'))install.packages("stringr");library(stringr)
if (!require('readxl'))install.packages("readxl");library(readxl)
if (!require('readr'))install.packages("readr");library(readr)
if(!require('arrow'))install.packages("arrow");library(arrow)
year_parquet = 2023
base = '/home/bruno/OneDrive/PLATAFORMA RBA IMOB/Base de Dados/'
load_itbi = paste0(base,'1_bronze/bronze_itbi/')
load_iptu_ap_sql = paste0(base,'/2_silver/silver_iptu_geocoded_sql/')
save_itbi_ap_sql = paste0(base,'/2_silver/silver_itbi_geocoded_sql/')
load_geo_centroid = paste0(base,'/1_bronze/bronze_auxiliary_data/bronze_sql_geo_centroid/')
# remocao de caracter especial --------------------------------------------
rm_accent <- function(x) iconv(x, from="UTF-8", to = "ASCII//TRANSLIT")
change_date <- function(df){
df$mes <- tolower(df$mes)
df$mes <- gsub('/','-', df$mes)
df$mes <- gsub('jan','01', df$mes)
df$mes <- gsub('fev','02', df$mes)
df$mes <- gsub('mar','03', df$mes)
df$mes <- gsub('abr','04', df$mes)
df$mes <- gsub('mai','05', df$mes)
df$mes <- gsub('jun','06', df$mes)
df$mes <- gsub('jul','07', df$mes)
df$mes <- gsub('ago','08', df$mes)
df$mes <- gsub('set','09', df$mes)
df$mes <- gsub('out','10', df$mes)
df$mes <- gsub('nov','11', df$mes)
df$mes <- gsub('dez','12', df$mes)
return(df)
}
# load geo IPTU -----------------------------------------------------------
ds <- open_dataset(load_iptu_ap_sql)
geo_iptu <- ds %>%
filter(ano_do_exercicio == year_parquet) %>%
collect()
df = geo_iptu %>% select("numero_do_contribuinte", "lat", "lon", "geotype") %>% group_by(numero_do_contribuinte)
rm(geo_iptu)
# load geo centroid -------------------------------------------------------
ds <- open_dataset(load_geo_centroid)
df_geo <- ds %>%
collect()
# criando o numero do contribuinte ----------------------------------------
df_geo$numero_do_contribuinte <- NA
df_geo$numero_do_contribuinte <- paste0(df_geo$lo_setor,df_geo$lo_quadra,df_geo$lo_lote)
df_geo$...1 <- NULL
df_geo$lo_setor <- NULL
df_geo$lo_quadra <- NULL
df_geo$lo_lote <- NULL
df_geo$lo_condomi <- NULL
df_geo$lo_tp_quad <- NULL
df_geo$lo_tp_lote <- NULL
df_geo <- df_geo[which(!duplicated(df_geo$numero_do_contribuinte)),]
# listando arquivos de ITBIs ----------------------------------------------
ITBIs <- list.files(path = load_itbi)
# iniciando o geocoding ---------------------------------------------------
for (i in ITBIs) {
path <- paste0(load_itbi,i)
itbi_sheet <- lapply(excel_sheets(path)[(1:(length(excel_sheets(path))-4))], read_excel, path = path)
df_final <- data.frame()
for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
df_final = rbind(df_final, df_inner_join)
}
df_final_temp = df_final[!is.na(df_final$lat),]
df_final_faltante = df_final[is.na(df_final$lat),]
for(index_faltante in 1:nrow(df_final_faltante)){
print(paste(index_faltante,'de',nrow(df_final_faltante)))
if(is.na(as.numeric(df_final_faltante[index_faltante,'n_do_cadastro_sql']))){next}
latlon <- df_geo[which.min(abs(as.numeric(df_geo$numero_do_contribuinte) - as.numeric(df_final_faltante[index_faltante,'n_do_cadastro_sql']))),]
df_final_faltante[index_faltante,'lat'] <- latlon$lat
df_final_faltante[index_faltante,'lon'] <- latlon$lon
}
df_final_faltante$geotype <- "quadra"
df_end <- rbind(df_final_temp, df_final_faltante)
df_end$natureza_de_transacao = gsub('\\.','',rm_accent(tolower(gsub("[0-9].", "", df_end$natureza_de_transacao))))
df_end$tipo_de_financiamento = gsub('\\.','',rm_accent(tolower(gsub("[0-9].", "", df_end$tipo_de_financiamento))))
write_dataset(df_end, save_itbi_ap_sql, format = "parquet", partitioning = c("sheet_date"), existing_data_behavior = "overwrite")
}
for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
sheet <- as.data.frame(do.call(rbind, strsplit(df_inner_join$sheet, "-")))
names(sheet) <- c("mes", "ano")
df_inner_join <- cbind(df_inner_join, change_date(sheet))
df_inner_join$sheet_date = as.Date(paste0(df_inner_join$ano, "-", df_inner_join$mes, "-01"))
df_inner_join$mes_ano_transacao = substring(df_inner_join$data_de_transacao, 1, nchar(df_inner_join$data_de_transacao)-3)
df_final = rbind(df_final, df_inner_join)
}
df_final <- data.frame()
for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
sheet <- as.data.frame(do.call(rbind, strsplit(df_inner_join$sheet, "-")))
names(sheet) <- c("mes", "ano")
df_inner_join <- cbind(df_inner_join, change_date(sheet))
df_inner_join$sheet_date = as.Date(paste0(df_inner_join$ano, "-", df_inner_join$mes, "-01"))
df_inner_join$mes_ano_transacao = substring(df_inner_join$data_de_transacao, 1, nchar(df_inner_join$data_de_transacao)-3)
df_final = rbind(df_final, df_inner_join)
}
for (i in ITBIs) {
path <- paste0(load_itbi,i)
itbi_sheet <- lapply(excel_sheets(path)[(1:(length(excel_sheets(path))-4))], read_excel, path = path)
df_final <- data.frame()
for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
sheet <- as.data.frame(do.call(rbind, strsplit(df_inner_join$sheet, "-")))
names(sheet) <- c("mes", "ano")
df_inner_join <- cbind(df_inner_join, change_date(sheet))
df_inner_join$sheet_date = as.Date(paste0(df_inner_join$ano, "-", df_inner_join$mes, "-01"))
df_inner_join$mes_ano_transacao = substring(df_inner_join$data_de_transacao, 1, nchar(df_inner_join$data_de_transacao)-3)
df_final = rbind(df_final, df_inner_join)
}
df_final_temp = df_final[!is.na(df_final$lat),]
df_final_faltante = df_final[is.na(df_final$lat),]
for(index_faltante in 1:nrow(df_final_faltante)){
print(paste(index_faltante,'de',nrow(df_final_faltante)))
if(is.na(as.numeric(df_final_faltante[index_faltante,'n_do_cadastro_sql']))){next}
latlon <- df_geo[which.min(abs(as.numeric(df_geo$numero_do_contribuinte) - as.numeric(df_final_faltante[index_faltante,'n_do_cadastro_sql']))),]
df_final_faltante[index_faltante,'lat'] <- latlon$lat
df_final_faltante[index_faltante,'lon'] <- latlon$lon
}
df_final_faltante$geotype <- "quadra"
df_end <- rbind(df_final_temp, df_final_faltante)
df_end$natureza_de_transacao = gsub('\\.','',rm_accent(tolower(gsub("[0-9].", "", df_end$natureza_de_transacao))))
df_end$tipo_de_financiamento = gsub('\\.','',rm_accent(tolower(gsub("[0-9].", "", df_end$tipo_de_financiamento))))
write_dataset(df_end, save_itbi_ap_sql, format = "parquet", partitioning = c("sheet_date"), existing_data_behavior = "overwrite")
}
df_final <- data.frame()
path <- paste0(load_itbi,i)
itbi_sheet <- lapply(excel_sheets(path)[(1:(length(excel_sheets(path))-4))], read_excel, path = path)
df_final <- data.frame()
for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
sheet <- as.data.frame(do.call(rbind, strsplit(df_inner_join$sheet, "-")))
names(sheet) <- c("mes", "ano")
df_inner_join <- cbind(df_inner_join, change_date(sheet))
df_inner_join$sheet_date = as.Date(paste0(df_inner_join$ano, "-", df_inner_join$mes, "-01"))
df_inner_join$mes_ano_transacao = substring(df_inner_join$data_de_transacao, 1, nchar(df_inner_join$data_de_transacao)-3)
df_final = rbind(df_final, df_inner_join)
}
df_final_temp = df_final[!is.na(df_final$lat),]
df_final_faltante = df_final[is.na(df_final$lat),]
ITBIs
ITBIs[3:18]
ITBIs=ITBIs[4:18]
for (i in ITBIs) {
path <- paste0(load_itbi,i)
itbi_sheet <- lapply(excel_sheets(path)[(1:(length(excel_sheets(path))-4))], read_excel, path = path)
df_final <- data.frame()
for (n in 1:length(itbi_sheet)) {
temp <- itbi_sheet[[n]]
if(length(temp)==29){
if (names(temp)[29]=="...29") {
temp["...29"]=NULL
}
}
names(temp) <- paste0(tolower(gsub("\\%","porc",gsub("\\?","",gsub("\\)","", gsub("\\(","", gsub(" ","_",rm_accent(names(temp)))))))))
temp$n_do_cadastro_sql = as.character(temp$n_do_cadastro_sql)
temp$n_do_cadastro_sql = str_pad(temp$n_do_cadastro_sql, 11, pad = "0")
temp$n_do_cadastro_sql = substring(temp$n_do_cadastro_sql, 1, nchar(temp$n_do_cadastro_sql)-1)
df_inner_join = merge(temp, df, by.x = "n_do_cadastro_sql", by.y = "numero_do_contribuinte", all.x = TRUE)
df_inner_join$sheet = excel_sheets(path)[n]
sheet <- as.data.frame(do.call(rbind, strsplit(df_inner_join$sheet, "-")))
names(sheet) <- c("mes", "ano")
df_inner_join <- cbind(df_inner_join, change_date(sheet))
df_inner_join$sheet_date = as.Date(paste0(df_inner_join$ano, "-", df_inner_join$mes, "-01"))
df_inner_join$mes_ano_transacao = substring(df_inner_join$data_de_transacao, 1, nchar(df_inner_join$data_de_transacao)-3)
df_final = rbind(df_final, df_inner_join)
}
df_final_temp = df_final[!is.na(df_final$lat),]
df_final_faltante = df_final[is.na(df_final$lat),]
if(nrow(df_final_faltante)!=0){
for(index_faltante in 1:nrow(df_final_faltante)){
print(paste(index_faltante,'de',nrow(df_final_faltante)))
if(is.na(as.numeric(df_final_faltante[index_faltante,'n_do_cadastro_sql']))){next}
latlon <- df_geo[which.min(abs(as.numeric(df_geo$numero_do_contribuinte) - as.numeric(df_final_faltante[index_faltante,'n_do_cadastro_sql']))),]
df_final_faltante[index_faltante,'lat'] <- latlon$lat
df_final_faltante[index_faltante,'lon'] <- latlon$lon
}
df_final_faltante$geotype <- "quadra"
df_end <- rbind(df_final_temp, df_final_faltante)
}else{
df_end <- df_final
}
df_end$natureza_de_transacao = gsub('\\.','',rm_accent(tolower(gsub("[0-9].", "", df_end$natureza_de_transacao))))
df_end$tipo_de_financiamento = gsub('\\.','',rm_accent(tolower(gsub("[0-9].", "", df_end$tipo_de_financiamento))))
write_dataset(df_end, save_itbi_ap_sql, format = "parquet", partitioning = c("sheet_date"), existing_data_behavior = "overwrite")
}
library(readxl)
library(qcc)
# problema 2 --------------------------------------------------------------
dados_problema2 <- read_excel("ceq_trab2.xlsx", sheet = 1)
setwd("~/github/UFU_trabalhos/Controle Estatístico de Qualidade/trab2")
library(readxl)
library(qcc)
dados_problema2 <- read_excel("ceq_trab2.xlsx", sheet = 1)
# d) O processo está em controle (fase 1) ? Apresente o gráfico gerado no R e os comandos para gerá-lo.
n=1
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, type = "c", nsigmas=3)
# e) Qual é o parâmetro do processo em controle ( p0 ou u0, de acordo com o tipo de gráfico) ?
u0 = grafico_c$center/n
u0
dados_problema2 = dados_problema2[dados_problema2$num_def_placa < grafico_c$limits[2],]
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, type = "c", nsigmas=3)
# d) O processo está em controle (fase 1) ? Apresente o gráfico gerado no R e os comandos para gerá-lo.
n=1
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, type = "c", nsigmas=3)
library(readxl)
library(qcc)
# problema 2 --------------------------------------------------------------
dados_problema2 <- read_excel("ceq_trab2.xlsx", sheet = 1)
# a) Descrição e apresentação dos dados.
# Os dados representam os defeitos da superfície de placas de aço foram observados em 24 placas retangulares. Obterndo o numero de defeitos na placa.
# b) No contexto dos dados, qual é a característica de interesse a ser monitorada no processo?
# A caracteristica a ser monitorada é o número de defeitos na placa.
# c) Qual o gráfico de controle apropriado para monitorar o processo?
# O gráfico de controle apropriado para monitorar o processo é o gráfico de c. Número de não-conformidades (defeitos) na amostra nesse caso por placa e de tamanho unico.
# d) O processo está em controle (fase 1) ? Apresente o gráfico gerado no R e os comandos para gerá-lo.
n=1
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, type = "c", nsigmas=3)
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, type = "c", nsigmas=3)
# e) Qual é o parâmetro do processo em controle ( p0 ou u0, de acordo com o tipo de gráfico) ?
u0 = grafico_c$center/n
u0
dados_problema2 = dados_problema2[dados_problema2$num_def_placa < grafico_c$limits[2],]
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, type = "c", nsigmas=3)
grafico_c$limits
grafico_c$center
alfa = 1 - ppois(6,u0)
alfa
# h) Qual é o poder do gráfico ao monitorar diferentes aumentos nos parâmetros do processo? Fixe 3
# valores para o parâmetro fora de controle (p1 ou u1) e calcule o poder desse gráfico. Apresentar os
# comandos. *Valores diferentes entre os grupos.
# para aumento de 40%, 100%, 200%
u1_1 = u0*0.4+u0
u1_2 = u0*1+u0
u1_3 = u0*2+u0
beta1 = 1 - ppois(6,u1_1)
beta2 = 1 - ppois(6,u1_2)
beta3 = 1 - ppois(6,u1_3)
nma1_1 = 1/beta1
nma1_2 = 1/beta2
nma1_3 = 1/beta3
# simulando dados
set.seed(27)
dados_problema2_new = rpois(3, 3)
grafico_c <- qcc(dados_problema2$num_def_placa, size = n, newdata = dados_problema2_new, newsizes =n, type = "c", nsigmas=3)
dados_problema4 <- read_excel("ceq_trab2.xlsx", sheet = 2)
grafico_p <- qcc(dados_problema4$notebook_def, size = dados_problema4$notebook_inspec, type = "p", nsigmas=3)
p0 <- sum(dados_problema4$notebook_def)/sum(dados_problema4$notebook_inspec)
p0
# f) Quais são os limites do gráfico para monitorar futuras observações ( fase 2)?
cbind(grafico_p$limits, grafico_p$sizes)
grafico_p$center
# g) Qual é probabilidade de ocorrer alarme falso? Apresentar os comandos.
n = 80
alfa = 1 - pbinom( (floor(grafico_p$limits[1,2] * n) ), n, p0)
alfa
n = 110
alfa = 1 - pbinom( (floor(grafico_p$limits[2,2] * n) ), n, p0)
alfa
n = 90
alfa = 1 - pbinom( (floor(grafico_p$limits[3,2] * n) ), n, p0)
alfa
n = 75
alfa = 1 - pbinom( (floor(grafico_p$limits[4,2] * n) ), n, p0)
alfa
n = 130
alfa = 1 - pbinom( (floor(grafico_p$limits[5,2] * n) ), n, p0)
alfa
n = 120
alfa = 1 - pbinom( (floor(grafico_p$limits[6,2] * n) ), n, p0)
alfa
n = 70
alfa = 1 - pbinom( (floor(grafico_p$limits[7,2] * n) ), n, p0)
alfa
n = 125
alfa = 1 - pbinom( (floor(grafico_p$limits[8,2] * n) ), n, p0)
alfa
n = 105
alfa = 1 - pbinom( (floor(grafico_p$limits[9,2] * n) ), n, p0)
alfa
n = 95
alfa = 1 - pbinom( (floor(grafico_p$limits[10,2] * n) ), n, p0)
alfa
p1 <- p0*0.4+p0
n = 80
poder = 1 - pbinom( (floor(grafico_p$limits[1,2] * n) ), n, p1)
poder # 0.03474402
nma1 <- 1/poder
nma1 # 28.78193
n = 110
poder = 1 - pbinom( (floor(grafico_p$limits[2,2] * n) ), n, p1)
poder # 0.04227034
nma1 <- 1/poder
nma1 # 23.65725
n = 90
poder = 1 - pbinom( (floor(grafico_p$limits[3,2] * n) ), n, p1)
poder # 0.0377209
nma1 <- 1/poder
nma1 # 26.5105
n = 75
poder = 1 - pbinom( (floor(grafico_p$limits[4,2] * n) ), n, p1)
poder # 0.04832621
nma1 <- 1/poder
nma1 # 20.6927
n = 130
poder = 1 - pbinom( (floor(grafico_p$limits[5,2] * n) ), n, p1)
poder # 0.07917314
nma1 <- 1/poder
nma1 # 12.63055
n = 120
poder = 1 - pbinom( (floor(grafico_p$limits[6,2] * n) ), n, p1)
poder # 0.04396828
nma1 <- 1/poder
nma1 # 22.74367
n = 70
poder = 1 - pbinom( (floor(grafico_p$limits[7,2] * n) ), n, p1)
poder # 0.03120489
nma1 <- 1/poder
nma1 # 32.04626
n = 125
poder = 1 - pbinom( (floor(grafico_p$limits[8,2] * n) ), n, p1)
poder # 0.05981439
nma1 <- 1/poder
nma1 # 16.71839
n = 105
poder = 1 - pbinom( (floor(grafico_p$limits[9,2] * n) ), n, p1)
poder # 0.05676171
nma1 <- 1/poder
nma1 # 17.61751
n = 95
poder = 1 - pbinom( (floor(grafico_p$limits[10,2] * n) ), n, p1)
poder # 0.05456227
nma1 <- 1/poder
nma1 # 18.32768
p1 <- p0*1+p0
n = 80
poder = 1 - pbinom( (floor(grafico_p$limits[1,2] * n) ), n, p1)
poder # 0.2486356
nma1 <- 1/poder
nma1 # 4.02195
n = 110
poder = 1 - pbinom( (floor(grafico_p$limits[2,2] * n) ), n, p1)
poder # 0.3398227
nma1 <- 1/poder
nma1 # 2.942711
n = 90
poder = 1 - pbinom( (floor(grafico_p$limits[3,2] * n) ), n, p1)
poder # 0.2810005
nma1 <- 1/poder
nma1 # 3.558712
n = 75
poder = 1 - pbinom( (floor(grafico_p$limits[4,2] * n) ), n, p1)
poder # 0.2860246
nma1 <- 1/poder
nma1 # 3.496202
n = 130
poder = 1 - pbinom( (floor(grafico_p$limits[5,2] * n) ), n, p1)
poder # 0.4970043
nma1 <- 1/poder
nma1 # 2.012055
n = 120
poder = 1 - pbinom( (floor(grafico_p$limits[6,2] * n) ), n, p1)
poder # 0.3665496
nma1 <- 1/poder
nma1 # 2.728144
n = 70
poder = 1 - pbinom( (floor(grafico_p$limits[7,2] * n) ), n, p1)
poder # 0.2141704
nma1 <- 1/poder
nma1 # 4.669179
n = 125
poder = 1 - pbinom( (floor(grafico_p$limits[8,2] * n) ), n, p1)
poder # 0.4317709
nma1 <- 1/poder
nma1 # 2.316043
n = 105
poder = 1 - pbinom( (floor(grafico_p$limits[9,2] * n) ), n, p1)
poder # 0.380033
nma1 <- 1/poder
nma1 # 2.631351
n = 95
poder = 1 - pbinom( (floor(grafico_p$limits[10,2] * n) ), n, p1)
poder # 0.3511452
nma1 <- 1/poder
nma1 # 2.847825
p1 <- p0*2+p0
n = 80
poder = 1 - pbinom( (floor(grafico_p$limits[1,2] * n) ), n, p1)
poder # 0.7981669
nma1 <- 1/poder
nma1 # 1.252871
n = 110
poder = 1 - pbinom( (floor(grafico_p$limits[2,2] * n) ), n, p1)
poder # 0.9097059
nma1 <- 1/poder
nma1 # 1.099256
n = 90
poder = 1 - pbinom( (floor(grafico_p$limits[3,2] * n) ), n, p1)
poder # 0.8455156
nma1 <- 1/poder
nma1 # 1.18271
n = 75
poder = 1 - pbinom( (floor(grafico_p$limits[4,2] * n) ), n, p1)
poder # 0.8149196
nma1 <- 1/poder
nma1 # 1.227115
n = 130
poder = 1 - pbinom( (floor(grafico_p$limits[5,2] * n) ), n, p1)
poder # 0.9693203
nma1 <- 1/poder
nma1 # 1.031651
n = 120
poder = 1 - pbinom( (floor(grafico_p$limits[6,2] * n) ), n, p1)
poder # 0.9309903
nma1 <- 1/poder
nma1 # 1.074125
n = 70
poder = 1 - pbinom( (floor(grafico_p$limits[7,2] * n) ), n, p1)
poder # 0.736777
nma1 <- 1/poder
nma1 # 1.357263
n = 125
poder = 1 - pbinom( (floor(grafico_p$limits[8,2] * n) ), n, p1)
poder # 0.9534952
nma1 <- 1/poder
nma1 # 1.048773
n = 105
poder = 1 - pbinom( (floor(grafico_p$limits[9,2] * n) ), n, p1)
poder # 0.9193888
nma1 <- 1/poder
nma1 # 1.087679
n = 95
poder = 1 - pbinom( (floor(grafico_p$limits[10,2] * n) ), n, p1)
poder # 0.8937276
nma1 <- 1/poder
nma1 # 1.118909
# simulando dados
dados_problema4_new = data.frame(notebook_def = c(1,12,6), notebook_inspec = c(80, 110, 90))
grafico_p <- qcc(dados_problema4$notebook_def, size = dados_problema4$notebook_inspec,
newdata = dados_problema4_new$notebook_def, newsizes = dados_problema4_new$notebook_inspec, type = "p", nsigmas=3)
